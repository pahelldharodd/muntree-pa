---
// This page is available at /admin-links
import Layout from "../layouts/Layout.astro";
---

<Layout title="Manage Links">
  <main>
    <div class="card">
      <h1 class="heading">Manage Links ðŸ”—</h1>
      <form id="addLinkForm" class="link-form">
        <input type="text" id="linkTitle" placeholder="Enter Title" required />
        <input type="url" id="linkUrl" placeholder="Enter URL" required />
        <button type="submit" class="btn primary-btn">Add Link</button>
      </form>

      <div id="linksContainer" class="links-container"></div>
      <p id="adminError" class="error hidden"></p>
    </div>
  </main>
</Layout>

<style>
  body {
    background-color: #e7ebf0;
    font-family: "Segoe UI", sans-serif;
    margin: 0;
    padding: 0;
  }

  .card {
    max-width: 700px;
    margin: 4rem auto;
    padding: 2rem;
    background: #ffffff;
    border-radius: 16px;
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.08);
  }

  .heading {
    font-size: 1.75rem;
    color: #1e2a78;
    font-weight: 600;
    text-align: center;
    margin-bottom: 1.5rem;
  }

  .link-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  input[type="text"],
  input[type="url"] {
    padding: 0.75rem;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-size: 1rem;
    outline-color: #1e2a78;
  }

  .btn {
    padding: 0.75rem 1.25rem;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s;
  }

  .primary-btn {
    background-color: #1e2a78;
    color: white;
  }

  .primary-btn:hover {
    background-color: #141c5a;
  }

  .btn-edit {
    background-color: #f0ad4e;
    color: white;
    padding: 0.75rem 1.25rem;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s;
  }

  .btn-edit:hover {
    background-color: #ec971f;
  }

  .btn-danger {
    background-color: #d9534f;
    color: white;
    padding: 0.75rem 1.25rem;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s;
  }

  .btn-danger:hover {
    background-color: #c9302c !important;
  }

  .error {
    color: #d9534f;
    text-align: center;
    font-size: 0.95rem;
    margin-top: 1rem;
  }

  .hidden {
    display: none;
  }
</style>
<style is:global>
  .link-item {
    background-color: #f9fafb;
    border: 1px solid #d1d5db;
    border-radius: 24px;
    padding: 1.2rem 1rem 1rem 1rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.8rem;
    box-shadow: 0 2px 8px rgba(30, 42, 120, 0.04);
    margin-bottom: 1rem;
    min-width: 0;
  }

  .link-info {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.3rem;
    width: 100%;
  }

  .link-title {
    font-weight: 700;
    color: #1e2a78;
    font-size: 1.1rem;
    text-align: center;
    margin-bottom: 0.1rem;
    word-break: break-word;
  }

  .link-url {
    color: #3b5bdb;
    text-decoration: none;
    font-size: 0.98rem;
    text-align: center;
    word-break: break-all;
    font-weight: 500;
  }

  .link-actions {
    display: flex;
    justify-content: space-between;
    width: 100%;
    gap: 1rem;
    margin-top: 0.8rem;
  }

  .btn-edit,
  .btn-danger {
    flex: 1 1 0;
    width: 50%;
    text-align: center;
  }

  .btn-edit {
    background-color: #ffe066;
    color: #222;
    border: 2px solid #ffe066;
    padding: 0.5rem 1.2rem;
    border-radius: 12px;
    font-weight: 600;
    font-size: 1rem;
    transition:
      background 0.2s,
      color 0.2s;
  }
  .btn-edit:hover {
    background-color: #fff3bf;
    border-color: #ffd43b;
  }

  .btn-danger {
    background-color: #fff;
    color: #d9534f;
    border: 2px solid #d9534f;
    padding: 0.5rem 1.2rem;
    border-radius: 12px;
    font-weight: 600;
    font-size: 1rem;
    transition:
      background 0.2s,
      color 0.2s;
  }
  .btn-danger:hover {
    background-color: #ffd6d6;
    color: #b71c1c;
    border-color: #b71c1c;
  }

  /* Edit form styles */
  .edit-form {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.7rem;
    width: 100%;
    margin-top: 0.2rem;
  }
  .edit-form input[type="text"],
  .edit-form input[type="url"] {
    width: 100%;
    padding: 0.6rem 0.9rem;
    border: 1.5px solid #d1d5db;
    border-radius: 8px;
    font-size: 1rem;
    margin-bottom: 0.2rem;
    background: #fff;
    color: #222;
    box-sizing: border-box;
    transition: border-color 0.2s;
  }
  .edit-form input[type="text"]:focus,
  .edit-form input[type="url"]:focus {
    border-color: #1e2a78;
    outline: none;
  }
  .edit-form > div {
    display: flex;
    gap: 0.7rem;
    width: 100%;
    justify-content: space-between;
  }
  .edit-form .btn-edit,
  .edit-form .btn-danger {
    width: 50%;
    margin: 0;
  }

  @media (max-width: 600px) {
    .link-item {
      padding: 0.8rem 0.4rem 0.7rem 0.4rem;
      border-radius: 14px;
    }
    .link-actions {
      flex-direction: column;
      gap: 0.5rem;
      align-items: stretch;
      margin-top: 0.5rem;
    }
    .btn-edit,
    .btn-danger {
      width: 100%;
      padding: 0.5rem 0;
    }
    .edit-form > div {
      flex-direction: column;
      gap: 0.5rem;
    }
    .edit-form .btn-edit,
    .edit-form .btn-danger {
      width: 100%;
    }
  }
</style>
<script>
  const token = localStorage.getItem("access_token");
  if (!token) window.location.href = "/admin-login";
  const linksContainer = document.getElementById("linksContainer");
  const errorElem = document.getElementById("adminError");

  function renderLinks(
    links: Array<{ id: number; title: string; url: string }>
  ) {
    if (!linksContainer) return;
    linksContainer.innerHTML = "";
    if (!links.length) {
      linksContainer.innerHTML =
        '<p style="text-align:center;color:#888;">No links found.</p>';
      return;
    }
    links.forEach((link: { id: number; title: string; url: string }) => {
      const div = document.createElement("div");
      div.className = "link-item";
      div.innerHTML = `
  <div class="link-info">
    <div class="link-title">${link.title}</div>
    <a class="link-url" href="${link.url}" target="_blank">${link.url}</a>
  </div>
  <div class="link-actions">
    <button class='btn-edit' data-id='${link.id}'>Edit</button>
    <button class='btn-danger' data-id='${link.id}'>Delete</button>
  </div>
`;
      // Delete button
      const deleteBtn = div.querySelector(
        ".btn-danger"
      ) as HTMLButtonElement | null;
      if (deleteBtn) {
        deleteBtn.onclick = async function () {
          const confirmDelete = confirm("are you sure you want to delete?");
          if (confirmDelete === false) {
            return;
          }
          const res = await fetch(
            `http://localhost:8000/admin/links/${link.id}`,
            {
              method: "DELETE",
              headers: { Authorization: `Bearer ${token}` },
            }
          );
          if (res.ok) {
            loadLinks();
          } else if (errorElem) {
            errorElem.textContent = "Failed to delete link.";
            errorElem.classList.remove("hidden");
          }
        };
      }
      // Edit button
      const editBtn = div.querySelector(
        ".btn-edit"
      ) as HTMLButtonElement | null;
      if (editBtn) {
        editBtn.onclick = function () {
          // Hide info, show edit form
          const infoDiv = div.querySelector(
            ".link-info"
          ) as HTMLDivElement | null;
          if (infoDiv) infoDiv.style.display = "none";
          editBtn.style.display = "none";
          if (deleteBtn) deleteBtn.style.display = "none";
          // Create edit form
          const form = document.createElement("form");
          form.className = "edit-form";
          form.innerHTML = `
            <input type="text" name="editTitle" value="${link.title}" required />
            <input type="url" name="editUrl" value="${link.url}" required />
            <div style="display:flex;gap:0.5rem;">
              <button type="submit" class="btn-edit">Save</button>
              <button type="button" class="btn-danger">Cancel</button>
            </div>
          `;
          // Save
          form.onsubmit = async function (e) {
            e.preventDefault();
            const editTitle = (
              form.querySelector('[name="editTitle"]') as HTMLInputElement
            ).value;
            const editUrl = (
              form.querySelector('[name="editUrl"]') as HTMLInputElement
            ).value;
            const res = await fetch(
              `http://localhost:8000/admin/links/${link.id}`,
              {
                method: "PATCH",
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({ title: editTitle, url: editUrl }),
              }
            );
            if (res.ok) {
              loadLinks();
            } else if (errorElem) {
              errorElem.textContent = "Failed to update link.";
              errorElem.classList.remove("hidden");
            }
          };
          // Cancel
          (form.querySelector(".btn-danger") as HTMLButtonElement).onclick =
            function () {
              loadLinks();
            };
          div.appendChild(form);
        };
      }
      linksContainer.appendChild(div);
    });
  }

  async function loadLinks() {
    if (!linksContainer) return;
    const res = await fetch("http://localhost:8000/admin/links", {
      headers: { Authorization: `Bearer ${token}` },
    });
    if (res.ok) {
      const links = await res.json();
      renderLinks(links);
    }
  }

  document
    .getElementById("addLinkForm")
    ?.addEventListener("submit", async function (e) {
      e.preventDefault();
      const titleElem = document.getElementById(
        "linkTitle"
      ) as HTMLInputElement | null;
      const urlElem = document.getElementById(
        "linkUrl"
      ) as HTMLInputElement | null;
      if (!titleElem || !urlElem) return;
      const title = titleElem.value.trim();
      const url = urlElem.value.trim();

      if (!url.startsWith("https://")) {
        alert("please enter a valid URL starting with https://");
        return;
      }

      const res = await fetch("http://localhost:8000/admin/links", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ title, url, visible: true }),
      });
      if (res.ok) {
        loadLinks();
        (e.target as HTMLFormElement).reset();
      } else if (errorElem) {
        errorElem.textContent = "Failed to add link.";
        errorElem.classList.remove("hidden");
      }
    });
  loadLinks();
</script>
